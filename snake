#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <conio.h>
#include <time.h>
using namespace std ;

const int N = 23; //定義變量 

struct Point {
    int x,y;
    void set(int X, int Y) {x=X; y=Y;}
};
HANDLE hIn, hOut;                           //控制器
Point  body[32], F, v = {-2,0};        //體塊 分數 移動方向
char   room[N][N*2+4];                      //房間
int    delay_time = 100;                    //延遲時間
int    x1=2,y1=1,x2=(N-1)*2,y2=N-1, len=2;  //房間邊界 身長
bool   bExit = false;                       //是否持續遊戲

void gotoxy (int x, int y)
{
    static COORD c; 
    c.X = x; c.Y = y;
    SetConsoleCursorPosition (hOut, c);
}

void draw (int x, int y, char* s)
{
    gotoxy (x,y);
    cout << s;
}

void drawList (char* a, char* b, char* c, int w, int h=1) //設置房間 
{
    static char* p = room[0];
    for (int i; h--; *p++=*c, *p++=c[1], *p++=0, p++)
        for (*p++='\n', *p++=*a, *p++=a[1], *p++=a[2],
            i=w-2; i--;) *p++=*b, *p++=b[1]; 
}
void put_F () //設定分數：口 的隨機值
{
    F.x = 3 + rand()%(N-2) * 2;
    F.y = 2 + rand()%(N-3);
  
}

void init()
{
    srand (time(0));
    hOut = GetStdHandle (STD_OUTPUT_HANDLE);
    hIn  = GetStdHandle (STD_INPUT_HANDLE);

    HANDLE err = INVALID_HANDLE_VALUE;
    if (hIn == err || hOut == err) {
        puts ("handle failed");
        getch ();
        exit (1);
    }
    drawList (" ┌","＿","┐", N);  
    drawList (" │","  ","│", N, N-2);
    drawList (" └","＿","┘", N);
    

    gotoxy (0,0);
    for (int i=0; i<N; i++) cout << room[i];
    put_F ();  //在房間隨機放置分數：口
  
    body[0].set ((x2-x1)/2, (y2-y1)/2);
    body[1].set (body[0].x+1, body[0].y);
}

void key_control() //操控 
{
    static DWORD count;
    static INPUT_RECORD ir;
       
    ReadConsoleInput (hIn, &ir, 1, &count);
    if (!ir.Event.KeyEvent.bKeyDown) return;                      
    switch (ir.Event.KeyEvent.wVirtualKeyCode) {                   
        case VK_UP   : if (v.y !=  1) v.set(0,-1); break;
        case VK_DOWN : if (v.y != -1) v.set(0, 1); break;
        case VK_LEFT : if (v.x !=  2) v.set(-2,0); break;                       
        case VK_RIGHT: if (v.x != -2) v.set( 2,0); break;
        case VK_ESCAPE: bExit = true;
    }       
}

void move_snack()
{  
    int i;
    int& x = body[0].x;
    int& y = body[0].y;
    for (i=1; i<len; i++)                   //檢查有沒有碰到自己
        if (body[0].x == body[i].x &&
            body[0].y == body[i].y ) break;

    if (i!=len || x<=x1 || x>x2 || y<=y1 || y>y2) {   //如果碰到自身就顯示失敗訊息
        draw (21,10,"你輸ㄌ");
        getch(); bExit = true;
        return;
    }
    if (x == F.x && y == F.y) {   //吃到食物
        delay_time -= 2;
        if (++len >= 30) {     //達到目標顯示勝利訊息 我這裡是寫吃到30個贏
            draw (21,10, "你贏ㄌ");
            getch(); bExit = true;
            return;
        }put_F();
    }
    else draw (body[len-1].x, body[len-1].y, "  "); //移動時動畫 

    for (i=len-1; i>0; --i) 
        body[i] = body[i-1];
    x += v.x;
    y += v.y;
    for (i=0; i<len; ++i)
        draw (body[i].x, body[i].y, "國");
}


int main ()
{
    init();
    while (!bExit)
    {       
        Sleep (delay_time); if (kbhit()) key_control();
        draw (F.x, F.y, "口");
        move_snack();
        Sleep (delay_time); if (kbhit()) key_control();           
        gotoxy (10,24);
        printf(" 移動鍵：上下左右\n");
        cout<<"\t  勝利條件：達到30分\t分數:"<<len<<"\n";
        printf ("\t口: (%2d,%2d)  頭: (%2d,%2d)", //顯示目前分數跟頭的座標 
            F.x, F.y, body[0].x, body[0].y);
    }
}
